{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["socket","socketIOClient","constraints","window","audio","video","App","useRef","useEffect","on","data","console","log","navigator","mediaDevices","getUserMedia","then","stream","mediaRecorder","MediaRecorder","onstart","e","this","chunks","ondataavailable","push","blob","Blob","emit","start","setInterval","stop","arrayBuffer","document","createElement","src","URL","createObjectURL","play","className","id","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"sOAGMA,E,MAASC,GADE,0BAIXC,EAAcC,OAAOD,YAAc,CACvCE,OAAO,EACPC,OAAO,GAgFMC,MA5Ef,WA+DE,OA7DcC,mBACKA,mBAEnBC,qBAAU,WACRR,EAAOS,GAAG,SAAS,SAACC,GAClBC,QAAQC,IAAIF,SAUhBG,UAAUC,aAAaC,aAAab,GACrCc,MAAK,SAACC,GAEL,IAAIC,EAAgB,IAAIC,cAAcF,GACtCC,EAAcE,QAAU,SAASC,GAC7BC,KAAKC,OAAS,IAElBL,EAAcM,gBAAkB,SAASH,GACrCC,KAAKC,OAAOE,KAAKJ,EAAEX,MACnB,IAAIgB,EAAO,IAAIC,KAAKL,KAAKC,OAAQ,CAAE,KAAS,2BAC5CvB,EAAO4B,KAAK,QAASF,IAMzBR,EAAcW,QAGdC,aAAY,WAENZ,EAAca,OACdb,EAAcW,UAGjB,KAKD7B,EAAOS,GAAG,OAAO,SAASuB,GACtB,IAAIN,EAAO,IAAIC,KAAK,CAACK,GAAc,CAAE,KAAS,2BAC1C5B,EAAQ6B,SAASC,cAAc,SACnC9B,EAAM+B,IAAMhC,OAAOiC,IAAIC,gBAAgBX,GACvCtB,EAAMkC,UAEV3B,QAAQC,IAAIK,MAWZ,qBAAKsB,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACA,qBAAKC,GAAG,mBClECC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3B,MAAK,YAAkD,IAA/C4B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlB,SAASmB,eAAe,SAM1BX,M","file":"static/js/main.404fec49.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nconst ENDPOINT = \"http://localhost:8888/\";\nconst socket = socketIOClient(ENDPOINT);\n\n\nconst constraints = window.constraints = {\n  audio: true,\n  video: true\n};\n\n\nfunction App() {\n  // const audio = useRef();\n  const video = useRef();\n  const otherVideo = useRef();\n\n  useEffect(() => {\n    socket.on(\"video\", (data) => {\n      console.log(data)\n    });\n    // socket.on(\"got\", (data) => {\n    //   console.log(data)\n    //   var otherVid = data\n    \n    // });\n  })\n\n\n  navigator.mediaDevices.getUserMedia(constraints)\n.then((stream)=> {\n\n  var mediaRecorder = new MediaRecorder(stream);\n  mediaRecorder.onstart = function(e) {\n      this.chunks = [];\n  };\n  mediaRecorder.ondataavailable = function(e) {\n      this.chunks.push(e.data);\n      var blob = new Blob(this.chunks, { 'type' : 'audio/ogg; codecs=opus' });\n      socket.emit('video', blob);\n    };\n  //   mediaRecorder.onstop = function(e) {\n  // };\n\n  // Start recording\n  mediaRecorder.start();\n\n  // Stop recording after 5 seconds and broadcast it server\n  setInterval(() => {\n    // setTimeout(function() {\n        mediaRecorder.stop()\n        mediaRecorder.start();\n      // }, 1000);\n\n  }, 700);\n  // console.log(stream)\n  // if (video.current) {\n    // var userVideoStream = stream\n    // video.current.srcObject = stream\n    socket.on('got', function(arrayBuffer) {\n        var blob = new Blob([arrayBuffer], { 'type' : 'audio/ogg; codecs=opus' });\n        var audio = document.createElement('audio');\n        audio.src = window.URL.createObjectURL(blob);\n        audio.play();\n  });\n    console.log(stream)\n// }\n  \n})\n\n\n  // navigator.mediaDevices.getUserMedia(constraints).then(stream=>{\n\n  // });\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <div id=\"container\">\n      {/* <video ref={video} id=\"gum-local\" controls autoPlay></video>\n      <video ref={otherVideo} id=\"gum-local\" controls autoPlay></video> */}\n\n</div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}